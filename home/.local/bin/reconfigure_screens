#!/home/luis/.venvs/rofi/bin/python
# Copyright (c) 2024 Luis Liñán
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""Check current xrandr information and reconfigure the screens in accordingly."""
import argparse
import re
import subprocess
import sys
import tempfile

from pathlib import Path
from typing import List, NamedTuple

from rofiwrapper import select_option

SCREEN_LAYOUT_DIR = Path().home().joinpath(".screenlayout")
LOG_PREFIX = "[Reconfigure Screens]"
MULTI_MONITORCACHE_FILE: Path = Path(tempfile.gettempdir()).joinpath("reconfigure-screens-cache")


class ScreenState(NamedTuple):
    name: str
    resolution: str
    in_use: bool


def main():
    args = parse_args()
    configurations: List[str] = [
        "1",
        "home",
        "office2",
        "office3",
    ]

    if args.configuration and args.configuration in configurations:
        select_display(args.configuration)
        return

    xrandr_output = subprocess.run(
        ["xrandr"], stdout=subprocess.PIPE, universal_newlines=True
    ).stdout
    screens = [
        ScreenState(match[0], match[1], bool(match[2]))
        for match in re.findall(
            pattern=r"^([\w-]+) connected.*\n.\s+(\d+x\d+)\s+\d+.\d+\s*(\*)?\+",
            string=xrandr_output,
            flags=re.MULTILINE,
        )
    ]
    if not screens:
        sys.exit(f"{LOG_PREFIX} ERROR: No screens found")

    select_display("1")

    if len(screens) == 1:
        send_notification("Reconfigure screens", "There is only one screen, nothing to do.")
        return

    if MULTI_MONITORCACHE_FILE.exists():
        cached_configuration = MULTI_MONITORCACHE_FILE.read_text().strip()
        if cached_configuration in configurations:
            select_display(cached_configuration)
            send_notification(
                "Reconfigure screens",
                "Using cached configuration in"
                f" {MULTI_MONITORCACHE_FILE} ({cached_configuration}). Delete to select a"
                " different configuration",
            )
            return

    connected_displays = ", ".join(f"{screen.name}:{screen.resolution}" for screen in screens)

    selected_configuration: str = configurations[
        select_option(
            prompt="Select configuration",
            options=configurations,
            message=connected_displays,
        )
    ]
    select_display(selected_configuration)
    MULTI_MONITORCACHE_FILE.touch()
    MULTI_MONITORCACHE_FILE.write_text(selected_configuration)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("--configuration")
    return parser.parse_args()


def select_display(script: str):
    subprocess.run([str(SCREEN_LAYOUT_DIR.joinpath(f"{script}.sh"))])
    subprocess.run(["/home/luis/bin/reload_wm.sh"])


def send_notification(title: str, message: str = ""):
    subprocess.run(["notify-send", title, message])


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
# Copyright (c) 2023 Luis Liñán
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""Execute a command and send the return code, time, stdout and stderr to a telegram user.

You can run any command preceding it with {prog}.

.. code-block:: shell

    {prog} ping -c 3 google.com

In order to run shell-specific command like pipes or redirections, the command must be quoted.

.. code-block:: shell

    {prog} 'echo "example text" | tee /tmp/example.log'

By default the STDOUT and a temporary file are written with the program output. Once the command
finishes, if the ``-ns`` and ``-k`` arguments are not specified, the program output will be sent to
Telegram and then the temporary file will be deleted.

If only the return code and execution time are wanted, the option ``-o null`` can be passed before
the command and will send the output to /dev/null:

.. code-block:: shell

    {prog} -o null ping -c 3 google.com

You can keep the output file with ``-k`` to check the files later. With this option, the program
will print the temporary file name used:

.. code-block:: shell

    {prog} -k ping -c 3 google.com

In any case, the help can be shown running:

.. code-blcok: shell

    {prog} --help

"""

import subprocess
import sys

if sys.version_info.minor <= 6:
    sys.exit("Only available for Python versions > 3.6")

try:
    import telegram
except ModuleNotFoundError:
    if input(
        "The 'python-telegram-bot' package is required but not installed. Do you want to install"
        " it? (yes/no): "
    ) not in ("y", "yes"):
        sys.exit("Please, install it manually to continue")

    if subprocess.run([sys.executable, "-m", "pip", "install", "python-telegram-bot"]).returncode:
        sys.exit("There was an error installing the package")

    import telegram

import argparse
import asyncio
import datetime
import enum
import os
import tempfile
import time
import uuid

from pathlib import Path
from typing import List, Optional, TextIO


class CommandAction(argparse.Action):
    """Parse the output and build the command necessary depending on if it is quoted or not."""

    def __call__(self, _, namespace, values, __=None):
        def _get_command():
            if len(values) == 1:
                return values[0]

            return " ".join(
                [
                    f'"{command_part}"' if " " in command_part else command_part
                    for command_part in values
                ]
            )

        if not values:
            raise argparse.ArgumentError(self, "A command is necessary")

        setattr(namespace, self.dest, _get_command())


class OutputArgumentChoice(enum.Enum):
    """Argument ``output`` possible choices."""

    file = enum.auto()
    stdout = enum.auto()
    both = enum.auto()
    null = enum.auto()

    def __str__(self):
        return self.name

    @staticmethod
    def from_string(string_choice: str) -> "OutputArgumentChoice":
        try:
            return OutputArgumentChoice[string_choice]
        except KeyError:
            raise ValueError(f"The string '{string_choice}' is not member of {__class__.__name__}")


async def send_telegram_message(
    bot_token: str,
    chat_id: str,
    command: str,
    command_time: datetime.timedelta,
    return_code: int,
    output_file: Optional[Path],
) -> None:
    """Format and send the completed command information.

    Firstly a description message will be sent having the following information:

    * The command run.
    * The return code of the command.
    * The command execution elapsed time.

    Depending on the length of the stdout and stderr the following will happend:

    * A message for each stdout and/or stderr if not empty.
    * A file for each stdout and/or stderr if not empty.

    The limits used are:

    * Maximum message size: ``4096``.
    * Maximum file size: ``~= 50MB`` (actually ``49MB`` for limit reasons).

    :param bot_token: The bot token for the messages to be sent.
    :param chat_id: The chat to which the messages will be sent.
    :param command: The command that has been run.
    :param command_time: Elapsed time of the command.
    :param return_code: The Command return code.
    :param output_file: The output of the program.

    """
    bot = telegram.Bot(token=bot_token)
    await bot.send_message(
        chat_id=chat_id,
        text=f"*Command:* `{command}`\n*Return code:* `{return_code}`\n*Time:* `{command_time}`",
        parse_mode="Markdown",
    )

    if output_file is None or not output_file.stat().st_size:
        return

    output_file_size = output_file.stat().st_size
    message_template = "*Program output:*\n```shell{}\n```"
    max_send_message_size = 4090 - len(message_template) - 2

    if output_file_size < max_send_message_size:
        await bot.send_message(
            chat_id=chat_id,
            text=message_template.format(output_file.read_text()),
            parse_mode="Markdown",
        )
        return

    max_send_file_size = 49 * 1024 * 1024

    if output_file_size > max_send_file_size:
        await bot.send_message(
            chat_id=chat_id,
            text=(
                f"The output file size is too large (`{output_file_size / 1024 / 1024}MB`)."
                " Trimming it to 49MB..."
            ),
            parse_mode="Markdown",
        )

    await bot.send_document(
        chat_id=chat_id,
        document=output_file.open("rb").read(max_send_file_size),
        filename=f"output.log",
    )


def parse_args():
    """Parse the command from stdin.

    :returns: The parsed arguments.

    """
    parser = argparse.ArgumentParser(
        epilog=__doc__.format(prog=Path(__file__).name),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "-ns",
        "--no-send",
        dest="send",
        action="store_false",
        help="Don't send the output to Telegram",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=OutputArgumentChoice.from_string,
        choices=list(OutputArgumentChoice),
        default=OutputArgumentChoice.both,
        help=f"Choose the output to use. Default: '{OutputArgumentChoice.both}'",
    )
    parser.add_argument(
        "-k",
        "--keep",
        action="store_true",
        help="Don't remove the output file after finishing the program",
    )
    parser.add_argument("command", nargs=argparse.REMAINDER, action=CommandAction)
    args = parser.parse_args()

    args.writing_to_file: bool = args.output in (
        OutputArgumentChoice.file,
        OutputArgumentChoice.both,
    )
    args.writing_to_stdout: bool = args.output in (
        OutputArgumentChoice.stdout,
        OutputArgumentChoice.both,
    )

    if not args.writing_to_file:
        args.keep = False
        args.send = False

    return args


def main():
    token, chat_id = os.environ.get("TG_BOT_TOKEN"), os.environ.get("TG_MY_ID")

    if not token or not chat_id:
        sys.exit("Please, initialise 'TG_BOT_TOKEN' and 'TG_MY_ID' environment variables")

    run_environment = os.environ.copy()
    run_environment.pop("TG_BOT_TOKEN", None)
    run_environment.pop("TG_MY_ID", None)

    args = parse_args()
    return_code: int = 1
    output_file_descriptors: List[TextIO] = []
    output_file = Path(tempfile.gettempdir(), f"tgout_{str(uuid.uuid4())}")

    if args.keep:
        print(f"Temporary output file: {output_file}")

    if args.writing_to_stdout:
        output_file_descriptors.append(sys.stdout)

    start_time = time.time()
    try:
        with output_file.open("w") as stdout_fd, subprocess.Popen(
            args=(args.command,),
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            shell=True,
            env=run_environment,
        ) as process:
            if args.writing_to_file:
                output_file_descriptors.append(stdout_fd)

            for chunk in process.stdout:
                list(map(lambda f: f.write(chunk), output_file_descriptors))

        return_code = process.wait()
    except KeyboardInterrupt:
        print("The proces was killed by Ctrl+C")
        return_code = 130
    finally:
        total_time = time.time() - start_time

    asyncio.run(
        send_telegram_message(
            bot_token=token,
            chat_id=chat_id,
            command=args.command,
            command_time=datetime.timedelta(seconds=round(total_time)),
            return_code=return_code,
            output_file=output_file if args.writing_to_file else None,
        )
    )

    if output_file.exists() and not args.keep:
        output_file.unlink()

    sys.exit(return_code)


if __name__ == "__main__":
    main()
